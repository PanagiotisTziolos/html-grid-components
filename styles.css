
    /* Don't touch this START */

    .container {
      padding: 8px;
      border: 2px dotted lightblue;
    }

    .logo {
      min-width: 40px;
      min-height: 40px;
      border: 2px dotted turquoise;
      /* specify a name for this element  */
      /* grid-area: b; */
    }

    .box {
      min-width: 40px;
      min-height: 40px;
      padding: 4px;
      border: 2px dotted lightcoral;
      /* specify a name for this element  */
      /* grid-area: a; */
    }

    .inner-box {
      min-width: 40px;
      min-height: 40px;
      padding: 4px;
      border: 2px dotted lightgreen;
    }

    .inner-logo {
      min-width: 36px;
      min-height: 36px;
      border: 2px dotted turquoise;
    }

    /* Don't touch this END */

    /* Write CSS Here */
    /* Practice re-using classes */

    .two-column-grid__expand-two {
        display: grid;
        grid-template-columns: 100px 1fr;
        /* 
            draw first a then b
            ignore the html order of elements
        */
        /* grid-template-areas: 'a b';  */

        /* 
            i can divide the width by a number greater 
            than the elements
            a third element doesnt exist 
            but spacec is reserved accordingly
            the first element takes space of 100px
            the second element takes width-100 / 2 
            the second element takes width-100 / 2 
        */
        /* grid-template-columns: 100px 1fr 1fr; */
    }

    .three-column-grid {
        display: grid;
        /* three columns with size of 1 / 3 of the width of the window */
        grid-template-columns: 1fr 1fr 1fr;
        /* 10px gap between each element of the grid */
        grid-gap: 10px;
    }

    .three-column-grid__expand-two {
        display: grid;
        /*
            seperate the width by 1+4+1=6
            assign to the first element 1/6 of the width
            assign to the second element 4/6 of the width
            assign to the third element 1/6 of the width
        */
        grid-template-columns: 1fr 4fr 1fr;
        grid-gap: 10px;
    }

    .five-column-grid {
        display: grid;
        /* repeat n times the space defined
            if creates that many elements with 
            the defined space
            so 1fr 5 times
            1fr 1fr 1fr 1fr 1 fr
        */
        grid-template-columns: repeat(5, 1fr);
        grid-gap: 10px;
    }

    .center-grid {
        display: grid;
        grid-template-columns: 200px;
        justify-content: center;
    }

    .grid-in-grid-1 {
        display: grid;
        grid-template-columns: 1fr 1fr;
    }

    @media screen and (max-width: 800px) {
        .grid-in-grid-1 {
            display: grid;
            grid-template-columns: 6fr 1fr;
        }
    }

    .grid-in-grid-2 {
        display: grid;
        grid-template-columns: auto 1fr 1fr;
        grid-gap: 10px;
    }

    .grid-madness {
        display: grid;
        grid-auto-flow: row;
        grid-template-areas: 'a' 'b' 'c';
        grid-gap: 10px;
    }

    .six-column-grid {
        display: grid;
        grid-template-columns: auto repeat(6, 1fr);
        grid-template-areas: 'a . . . . . .';
        grid-gap: 10px;
    }

    .show-first {
        grid-area: a;
    }

    .show-second {
        grid-area: b;
    }

    .show-last {
        grid-area: c;
    }

    .most-right {
        direction: rtl;
    }

    .my-three-column-grid {
        display: grid;
        grid-template-columns: 1fr 3fr 1fr;
        grid-template-areas: 'a b c';
        grid-gap: 10px;
    }

    .three-row-grid {
        display: grid;
        grid-template-rows: repeat(10, 1fr);
        grid-gap: 10px;
    }

    .ten-row-grid {
        display: grid;
        grid-template-rows: repeat(10, 1fr);
    }

    .two-row-grid {
        display: grid;
        grid-template-rows: 8fr 2fr;
    }

    .one-column-grid {
        display: grid;
        justify-content: left;
    }